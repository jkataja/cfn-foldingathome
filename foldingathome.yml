# https://github.com/jkataja/cfn-foldingathome
AWSTemplateFormatVersion: 2010-09-09
Description: |
  Run Folding@home on spot instances to help find cure for COVID-19.

Mappings:
  # Ubuntu 20.04 LTS AMI IDs as of 2020-04-26 from https://cloud-images.ubuntu.com/locator/ec2/
  Ubuntu1804:
    af-south-1: 
      ImageId: 'ami-033b88f80930a0f7a'
    ap-east-1:
      ImageId: 'ami-9ccc8aed'
    ap-northeast-1:
      ImageId: 'ami-0c1ac8728ef7f87a4'
    ap-northeast-2:
      ImageId: 'ami-0de407404c33d1671'
    ap-northeast-3:
      ImageId: 'ami-0e319adbbd61f8b6f'
    ap-south-1:
      ImageId: 'ami-0c5b1a88222ac79cb'
    ap-southeast-1:
      ImageId: 'ami-0b8cf0f359b1335e1'
    ap-southeast-2:
      ImageId: 'ami-0a1a4d97d4af3009b'
    ca-central-1:
      ImageId: 'ami-08a6203f59f9df866'
    cn-north-1:
      ImageId: '' # Not available yet 
    cn-northwest-1:
      ImageId: '' # Not available yet 
    eu-central-1:
      ImageId: 'ami-05c26ae4789875080'
    eu-north-1:
      ImageId: 'ami-0d4e2b57f569e9daa'
    eu-west-1:
      ImageId: 'ami-0dad359ff462124ca'
    eu-west-2:
      ImageId: 'ami-0917237b4e71c5759'
    eu-west-3:
      ImageId: 'ami-0e60c6afa19d896ee'
    me-south-1:
      ImageId: 'ami-09cbb7fde4a0edad0'
    sa-east-1:
      ImageId: 'ami-001c16a3a4f5d85f1'
    us-east-1:
      ImageId: 'ami-068663a3c619dd892' 
    us-east-2:
      ImageId: 'ami-0e84e211558a022c0'
    us-west-1:
      ImageId: 'ami-075fd582acf0c0128'
    us-west-2:
      ImageId: 'ami-09dd2e08d601bff67'

Parameters: 
  Anonymous:
    Description: Folding@home fold anonymously (default true for anonymous)
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  FoldingAtHomeTeam:
    Description: Folding@home team number (default 0 for no team)
    Type: Number
    Default: 0
  FoldingAtHomeUser:
    Description: Folding@home user name (default Anonymous for anonymous user)
    Type: String
    Default: 'Anonymous'
  FoldingAtHomePasskey:
    Description: Folding@home pass key (default empty for anonymous user)
    Type: String
    Default: ''
  InstanceCount:
    Description: Scale-out count of g4dn.xlarge instances to run the Folding@home client
    Type: Number
    Default: 1
  KeyName:
    Description: SSH key name for ubuntu user
    Type: AWS::EC2::KeyPair::KeyName
  Subnets:
    Description: Subnets in VPC (for example the default VPC subnets 172.31.0.0/20, 172.31.16.0/20 and 172.31.32.0/20)
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC for the stack (for example the default VPC 172.31.0.0/16)
    Type: AWS::EC2::VPC::Id
  SSHLocation:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-28
    Default: '0.0.0.0/0'
    Description: Network allowed to SSH to instances in public subnet (default 0.0.0.0/0 to allow from everywhere)
    Type: String

Resources: 
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref InstanceCount
      DesiredCapacity: !Ref InstanceCount
      MinSize: '0'
      VPCZoneIdentifier: !Ref Subnets
      Tags:
        - Key: Name
          Value: Folding@home
          PropagateAtLaunch: True
    # CreationPolicy:
    #   ResourceSignal:
    #     Count: !Ref InstanceCount
    #     Timeout: 'PT10M' # 10 minutes

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        BlockDeviceMappings:
          - DeviceName: '/dev/sda1'
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 20
              VolumeType: 'gp2'
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: !FindInMap [ Ubuntu1804, !Ref 'AWS::Region', ImageId ]
        InstanceType: 'g4dn.xlarge'
        InstanceMarketOptions:
          MarketType: 'spot'
          SpotOptions:
            SpotInstanceType: 'one-time'
        EbsOptimized: true
        KeyName: !Ref KeyName
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -ex
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            # Use instance store for Folding@home
            mkdir /var/lib/fahclient
            chown ubuntu:ubuntu /var/lib/fahclient
            # Download Folding@home client in background
            wget https://download.foldingathome.org/releases/public/release/fahclient/debian-stable-64bit/v7.6/fahclient_7.6.9_amd64.deb&
            # Install NVidia CUDA drivers and Python
            wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
            mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
            apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
            add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
            apt-get update
            apt-get -y upgrade
            apt-get -y install --no-install-recommends cuda nvidia-utils-440 awscli 
            # Optimize GPU settings
            nvidia-smi -ac 5001,1590
            # Install Folding@home
            dpkg-deb -x fahclient_7.6.9_amd64.deb /
            mkdir /etc/fahclient
            cat<<END >/etc/fahclient/config.xml
            <config>
              <fold-anon v="${Anonymous}"/>
              <user v="${FoldingAtHomeUser}"/>
              <team v="${FoldingAtHomeTeam}"/>
              <passkey v="${FoldingAtHomePasskey}"/>
              <power v="full"/>
              <gpu v="true"/>
              <slot id="0" type="CPU"/>
              <slot id="1" type="GPU"/>
              <allow>127.0.0.1</allow>
              <web-allow>127.0.0.1</web-allow>
            </config>
            END
            cat<<END >/var/lib/fahclient/GPUs.txt
            0x10de:0x1eb8:2:7:TU104GL [Tesla T4]
            END
            cat<<END >/usr/local/bin/asg-unhealthy
            #!/bin/bash
            [ "\$SERVICE_RESULT" == "success" ] && exit 0
            # TODO: Update the curl for IMDSv2
            exec /usr/bin/aws autoscaling set-instance-health --instance-id $(curl http://169.254.169.254/latest/meta-data/instance-id) --health-status "Unhealthy" --region ${AWS::Region}
            END
            chmod a+rx /usr/local/bin/asg-unhealthy
            cat<<END >/etc/systemd/system/fahclient.service
            [Unit]
            Description=Folding@home client
            After=network.target

            [Service]
            User=ubuntu
            WorkingDirectory=/var/lib/fahclient
            ExecStart=/usr/bin/FAHClient --config /etc/fahclient/config.xml
            ExecStopPost=/usr/local/bin/asg-unhealthy

            [Install]
            WantedBy=multi-user.target
            END
            systemctl start fahclient
            systemctl enable fahclient

            # send success signal
            aws cloudformation signal-resource --status SUCCESS --stack ${AWS::StackName} --logical-resource-id AutoScalingGroup --unique-id $(curl http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region}

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Folding@home spot instance security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CustomHealthCheckRole

  CustomHealthCheckRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
      Policies:
        - PolicyName: 'CustomHealthCheck'
          PolicyDocument:
           Version: '2012-10-17'
           Statement:
              - Effect: 'Allow'
                Action: 'autoscaling:SetInstanceHealth'
                Resource: !Sub 'arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*'
                Condition:
                  StringEquals:
                    'aws:ResourceTag/aws:cloudformation:stack-name': !Ref 'AWS::StackName'
              - Effect: 'Allow'
                Action: 'cloudformation:SignalResource'
                Resource: "*"

